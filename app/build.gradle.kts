/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

val mockitoAgent = configurations.create("mockitoAgent")

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // Mockito
    // testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation("org.mockito:mockito-inline:5.+") // includes "core"
    testImplementation("org.mockito:mockito-junit-jupiter:5.+")

    testImplementation(libs.mockito)
    mockitoAgent(libs.mockito) { isTransitive = false }

    // This dependency is used by the application.
    implementation(libs.guava)

    implementation("com.stripe:stripe-java:29.3.0")

    implementation("org.slf4j:slf4j-log4j12:1.7.29")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}

tasks.named<Test>("test") {
    testLogging {
        events("passed", "skipped", "failed")
    }
    dependsOn("cleanTest")
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks {
    test {
        jvmArgs?.add("-javaagent:${mockitoAgent?.asPath}")
    }
}
